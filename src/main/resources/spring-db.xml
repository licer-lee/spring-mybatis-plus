<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx
    	http://www.springframework.org/schema/tx/spring-tx.xsd">


	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>

	<!-- 连接池 -->
	<bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- sessionFactory -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="myDataSource" /> <property name="configLocation" 
		value="classpath:mybatis-config.xml" /> </bean> -->

	<!-- 扫描注册mapper接口，自动注入mapper.xml -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="com.liwc.mapper" /> <property name="sqlSessionFactoryBeanName" 
		value="sqlSessionFactory" /> </bean> -->

	<bean id="sqlSessionFactory"
		class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		
		<property name="dataSource" ref="myDataSource" />
		
		<!-- 配置实体扫描路径，多个package可以用分号; 逗号, 分隔， 支持通配符* -->
		<!-- com.a.b.entity;com.a.c.entity;com.d.*.entity -->
		
		<!-- <property name="typeAliasesPackage" value="com.baomidou.mybatisplus.test.h2.entity" /> -->
		<property name="configuration" ref="mybatisConfig" />
		<!-- MP 全局配置注入 -->
		<property name="globalConfig" ref="globalConfig" />
		<property name="plugins">
			<array>
				<!-- 分页插件配置 -->
				<bean id="paginationInterceptor"
					class="com.baomidou.mybatisplus.plugins.PaginationInterceptor" />
				<!-- 乐观锁插件 -->
				<!-- <bean id="optimisticLockerInterceptor"
					class="com.baomidou.mybatisplus.plugins.OptimisticLockerInterceptor">
				</bean> -->
				<!-- 性能拦截器，兼打印sql，不建议生产环境配置 -->
				<bean id="performanceInterceptor"
					class="com.baomidou.mybatisplus.plugins.PerformanceInterceptor" />
			</array>
		</property>
	</bean>

	<bean id="mybatisConfig" class="com.baomidou.mybatisplus.MybatisConfiguration">
		<property name="mapUnderscoreToCamelCase" value="true" />
		
		<!-- 部分数据库不识别默认的NULL类型（比如oracle，需要配置该属性 -->
		<!-- <property name="jdbcTypeForNull">
			<util:constant static-field="org.apache.ibatis.type.JdbcType.NULL" />
		</property> -->
	</bean>

	<!-- 定义 MP 全局策略 -->
	<bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
		<!-- 逻辑删除 定义下面3个参数 -->
		<property name="sqlInjector" ref="logicSqlInjector" />
		<property name="logicDeleteValue" value="-1" />
		<property name="logicNotDeleteValue" value="1" />
		
		<!-- 全局ID类型： 0, "数据库ID自增"， 1, "用户输入ID", 2, "全局唯一ID", 3, "全局唯一ID" -->
		<property name="idType" value="2" />
		
		<!-- 2.1-gamma+ 数据库自动识别，无需配置数据库类型 
		<property name="dbType" value="mysql" /> -->
		
		<!--主键Sequence -->
		<!-- <property name="keyGenerator" ref="keyGenerator" /> -->
		
		<!-- 公共字段填充处理器 -->
		<!-- <property name="metaObjectHandler" ref="myMetaObjectHandler" /> -->
		
		<!--数据库关键字转义符，'desc', "desc" 2.1-gamma+不需要制定 -->
		<!--<property name="identifierQuote" value="'" /> -->
	</bean>

	<!-- 配置oracle主键Sequence， 其他类型数据库，请配置相应的类型 -->
	<!-- <bean id="keyGenerator" class="com.baomidou.mybatisplus.incrementer.OracleKeyGenerator" /> -->

	<!-- 自定义处理器 -->
	<!-- <bean id="myMetaObjectHandler" class="com.baomidou.test.MyMetaObjectHandler" /> -->
	
	<!-- 逻辑删除Sql注入器 -->
	<bean id="logicSqlInjector" class="com.baomidou.mybatisplus.mapper.LogicSqlInjector" />

	<!-- 配置mybatis 扫描mapper接口的路径, 相当于注解@MapperScan，@MapperScan("com.baomidou.mybatisplus.test.h2.entity.mapper") -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.liwc.mapper" />
	</bean>



	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myDataSource" />
	</bean>

	<!-- 启用注解事物 @Transactional -->
	<!-- <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" 
		/> -->


	<!-- 启用声明式事物：启用aop自动代理 -->
	<aop:aspectj-autoproxy />

	<!-- aop声明式事物 -->
	<aop:config>
		<!-- 定义切入点 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.liwc.service..*.*(..))"></aop:pointcut>
		<!-- 关联切入点与待织入的逻辑 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

	<!-- 定义织入的逻辑（事物管理器） -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 修改操作设置 -->
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<!-- 查询操作设置只读事物 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice>




</beans>